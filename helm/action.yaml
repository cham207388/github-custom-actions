name: Terraform Action for AWS

inputs:
  aws-region:
    description: 'AWS Region'
    required: true
  directory:
    description: 'Directory of the Terraform configuration'
    required: true
  variables:
    description: 'Variables to pass to Terraform'
    required: false
  aws-access-key-id:
    description: 'AWS Access Key ID'
    required: false
  aws-secret-access-key:
    description: 'AWS Secret Access Key'
    required: false
  role-arn:
    description: 'Role ARN to assume'
    required: false
  role-session-name:
    description: 'Role Session Name'
    required: false
    # For AWS auth, you can use either aws-access-key-id/aws-secret-access-key 
    # or role-arn/role-session-name
runs:
  using: "composite"
  steps:
  - name: Print Where I AM
    run: pwd
    shell: bash

  - name: Print Directory Structure
    run: ls -al ./
    shell: bash

  - name: Login to AWS
    uses: aws-actions/configure-aws-credentials@v4
    with:
      aws-access-key-id: ${{ inputs.aws-access-key-id }}
      aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
      aws-region: ${{ inputs.aws-region }}

  # Step 1: Select Workspace
  - name: Setup Terraform
    uses: hashicorp/setup-terraform@v3
    with:
      terraform_version: 1.11.1

  - name: Terraform Init
    run: terraform init -upgrade
    working-directory: ${{ inputs.directory }}
    shell: bash

  # Step 3: Select Workspace
  - name: Select workspace
    run: |
      if [ -n "${{ inputs.workspace }}" ]; then
          terraform workspace select ${{ inputs.workspace }} || terraform workspace new ${{ inputs.workspace }}
      else
        echo "No workspace provided, skipping workspace selection."
      fi
    working-directory: ${{ inputs.directory }}
    shell: bash

  - name: Terraform Validate
    run: terraform validate
    working-directory: ${{ inputs.directory }}
    shell: bash

  - name: Terraform Plan
    run: |
      var_args=""
      if [ ! -z "${{ inputs.var_file }}" ]; then
        var_args="$var_args -var-file=${{ inputs.var_file }}"
      fi
      if [ ! -z "${{ inputs.variables }}" ]; then
        for var in $(echo "${{ inputs.variables }}" | tr ',' '\n'); do
          var_args="$var_args -var $var"
        done
      fi
      terraform plan $var_args
      working-directory: ${{ inputs.directory }}
    shell: bash
  # - name: Terraform Apply
  #   env:
  #     TF_VAR_region: ${{ inputs.aws_region }}
  #   run: |
  #   terraform apply -auto-approve
  # working-directory: ${{ inputs.directory }}
  # shell: bash
